// Code generated by "enumer -type=N76E003LDROMSize -trimprefix=N76E003LDROM -transform=snake -json -text"; DO NOT EDIT

package n76

import (
	"encoding/json"
	"fmt"
)

const _MS51FB9AELDROMSizeName = "0kb1kb2kb3kb4kb"

var _MS51FB9AELDROMSizeIndex = [...]uint8{0, 3, 6, 9, 12, 15}

func (i MS51FB9AELDROMSize) String() string {
	if i >= MS51FB9AELDROMSize(len(_MS51FB9AELDROMSizeIndex)-1) {
		return fmt.Sprintf("MS51FB9AELDROMSize(%d)", i)
	}
	return _MS51FB9AELDROMSizeName[_MS51FB9AELDROMSizeIndex[i]:_MS51FB9AELDROMSizeIndex[i+1]]
}

var _MS51FB9AELDROMSizeValues = []MS51FB9AELDROMSize{0, 1, 2, 3, 4}

var _MS51FB9AELDROMSizeNameToValueMap = map[string]MS51FB9AELDROMSize{
	_MS51FB9AELDROMSizeName[0:3]:   0,
	_MS51FB9AELDROMSizeName[3:6]:   1,
	_MS51FB9AELDROMSizeName[6:9]:   2,
	_MS51FB9AELDROMSizeName[9:12]:  3,
	_MS51FB9AELDROMSizeName[12:15]: 4,
}

// N76E003LDROMSizeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MS51FB9AELDROMSizeString(s string) (MS51FB9AELDROMSize, error) {
	if val, ok := _MS51FB9AELDROMSizeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MS51FB9AELDROMSize values", s)
}

// N76E003LDROMSizeValues returns all values of the enum
func MS51FB9AELDROMSizeValues() []MS51FB9AELDROMSize {
	return _MS51FB9AELDROMSizeValues
}

// IsAN76E003LDROMSize returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MS51FB9AELDROMSize) IsAMS51FB9AELDROMSize() bool {
	for _, v := range _MS51FB9AELDROMSizeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for N76E003LDROMSize
func (i MS51FB9AELDROMSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for N76E003LDROMSize
func (i *MS51FB9AELDROMSize) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("N76E003LDROMSize should be a string, got %s", data)
	}

	var err error
	*i, err = MS51FB9AELDROMSizeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for N76E003LDROMSize
func (i MS51FB9AELDROMSize) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for N76E003LDROMSize
func (i *MS51FB9AELDROMSize) UnmarshalText(text []byte) error {
	var err error
	*i, err = MS51FB9AELDROMSizeString(string(text))
	return err
}
